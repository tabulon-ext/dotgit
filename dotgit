#!/usr/bin/env python3

import argparse
import os
import socket
import sys
import json
import subprocess

home = os.environ['HOME']
filelist = 'filelist'
dotfiles = 'dotfiles'

class Git:
    def __init__(self):
        pass

    def run(self, cmd):
        try:
            subprocess.run(cmd, check=True, capture_output=True)
        except subprocess.CalledProcessError as cp:
            log('command', cmd, 'failed, output:\n',
                    cp.stderr.decode(), level=0)
            sys.exit(1)

    def init(self):
        log('git initing')
        self.run(['git', 'init'])

    def add(self, fname):
        log('git adding', fname)
        self.run(['git', 'add', fname])

    def commit(self, msg):
        log('git committing "{}"'.format(msg))
        self.run(['git', 'commit', '-m', msg])

# level 0: errors
# level 1: informational
# level 2: debug
# level 3: variables
def log(*msg, level=2, pretty=False):
    global args

    # prettify dicts
    if pretty:
        msg = list(msg)
        for i in range(len(msg)):
            if type(msg[i]) is dict:
                msg[i] = json.dumps(msg[i], sort_keys=True, indent=1)

    if level == 0:
        print("ERROR:", *msg, file=sys.stderr)
    elif level <= args.verbose:
        print(*msg)

def initialize_repo():
    '''makes the current dir a dotgit repo'''

    log('initializing dotgit repo')

    git.init()
    with open(filelist, 'a') as f:
        pass

    git.add(filelist)
    git.commit('initial dotgit commit')

def safety_checks():
    '''runs various startup safety checks.

    will call sys.exit(1) if a problem is found.
    '''

    log('running safety checks')

    if os.getcwd() == home:
        log('refusing to run dotgit in your home directory, aborting', level=0)
        sys.exit(1)

    if not os.path.isdir('.git'):
        log('this does not appear to be a git repo, aborting', level=0)
        sys.exit(1)

    if not os.path.isfile(filelist):
        log('cannot find filelist, aborting', level=0)
        sys.exit(1)

    if not os.path.isdir(dotfiles):
        try:
            os.makedirs(dotfiles)
        except OSError:
            log('cannot create dotfiles directory, aborting', level=0)
            sys.exit(1)

def parse_filelist(flist):
    '''parses the filelist
    :param flist: the filelist path
    :returns: a tuple (categories, groups)
    '''

    log('parsing filelist')

    categories = {}
    groups = {}

    with open(flist, 'r') as f:
        lines = f.readlines()

        for line in lines:
            line = line.strip()
            if not line:
                continue
            if line.startswith('#'):
                continue

            if ':' in line:
                fname, cat = line.split(':')
                cat = sorted(cat.split(','))
                for c in cat:
                    categories[c] = categories.get(c, []) + [fname]
            elif '=' in line:
                group, cat = line.split('=')
                cat = sorted(cat.split(','))
                groups[group] = cat
            else:
                categories['common'] = categories.get('common', []) + [line]

    log('filelist', filelist, 'parsed')
    log('({}) categories:'.format(filelist), categories, pretty=True, level=4)
    log('({}) groups:'.format(filelist), groups, pretty=True, level=4)
    return categories, groups

def active_categories(selected, categories, groups):
    """determines the active categories by expanding the selected options

    :param selected: the selected categories as they come from the program
    arguments
    :param categories: all the categories in the filelist
    :param groups: the groups as defined in the filelist
    :returns: a list of active categories
    """

    if not type(selected) is list:
        selected = [selected]

    # expand groups
    selected = [groups.get(s, [s]) for s in selected]
    selected = [i for j in selected for i in j]

    # remove duplicates and make set
    selected = set(selected)

    # return intersection between selected and available categories
    return sorted(list(set(categories) & selected))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    valid_actions = {
            'init',
            'update',
            'restore',
            'clean',
            'diff',
            }

    # TODO: make the default value for verbose 0 again
    parser.add_argument('--verbose', '-v', action='count', default=4)
    parser.add_argument('--hard', action='store_true')
    parser.add_argument('action', choices=valid_actions)
    parser.add_argument('category', nargs='*',
            default=socket.gethostname())

    args = parser.parse_args()
    log('called with arguments:', vars(args))

    git = Git()

    if args.action == 'init':
        initialize_repo()
        sys.exit(0)

    # run safety checks before starting
    safety_checks()

    # parse filelist
    categories, groups = parse_filelist(filelist)

    # determine active categories
    categories = active_categories(args.category, categories, groups)
