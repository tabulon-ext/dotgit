#! /bin/bash

declare DG_PASS
declare DG_PASS_FILE="passwd"
declare -r DG_HASH="sha1sum"
declare -i DG_HASH_COUNT=1500

function get_password
{
	# For compatibility with previous version of dotgit
	[[ $DG_PREV_PASS ]] && DG_PASS=$DG_PREV_PASS
	unset DG_PREV_PASS
	# -------------------------------------------------

	if [[ ! $DG_PASS ]]; then
		local mod
		if [ -f "$REPO/$DG_PASS_FILE" ]; then
			mod="your"
		else
			mod="a new"
		fi
		echo -n "Please enter $mod password (nothing will be shown): "

		read -sr DG_PASS
		echo
	fi

	# For compatibility with previous version of dotgit
	if [[ $DG_READ_MANGLE ]]; then
		DG_PREV_PASS=$DG_PASS
		IFS=$'\n'
		# shellcheck disable=SC2162
		read DG_PASS <<< "$DG_PASS"
		return
	fi
	# -------------------------------------------------

	IFS=$' '
	local tmp=$DG_PASS

	local -i i=0
	while [[ $i -lt $DG_HASH_COUNT ]]; do
		tmp=($($DG_HASH <<< "${tmp[0]}"))
		i=$((i + 1))
	done

	if [ -f "$REPO/$DG_PASS_FILE" ]; then
		[[ ${tmp[0]} == "$(cat "$REPO/$DG_PASS_FILE")" ]] && return
		errecho "Incorrect password, exiting..."
		exit 1
	else
		echo -n "${tmp[0]}" > "$REPO/$DG_PASS_FILE"
	fi
}

function change_password
{
	get_password
	crypt "decrypt"
	rm "$REPO/$DG_PASS_FILE"
	get_password
	crypt "encrypt" "force"
}

function crypt
{
	verecho "\nInitiating $1ion"
	local FR_D
	local TO_D

	if [[ $1 == "encrypt" ]]; then
		FR_D="$REPO/$DG_DMZ"
		TO_D="$REPO/$DG_DFDIR"
	else
		FR_D="$REPO/$DG_DFDIR"
		TO_D="$REPO/$DG_DMZ"
	fi

	local f
	local -a c

	IFS=$'\n'
	for index in $(seq 1 ${#FN[@]}); do
		index=$((index - 1))

		[[ ${FE[$index]} -ne 1 ]] && continue

		f=${FN[$index]}
		IFS=$',' c=(${FC[$index]})

		verecho "$(levecho 1 "${1^}ing $f")"

		local df_fl="$REPO/$DG_DFDIR/${c[0]}/$f"
		local dm_fl="$REPO/$DG_DMZ/${c[0]}/$f"

		local fr_fl="$FR_D/${c[0]}/$f"
		local to_fl="$TO_D/${c[0]}/$f"

		local hashed
		local hashfl

		if [ -f "$dm_fl" ]; then
			verecho "$(levecho 2 "Found file in dmz")"
			hashed=$($DG_HASH "$dm_fl")
			hashed=${hashed%% *}
		fi

		if [ -f "$df_fl.hash" ]; then
			verecho "$(levecho 2 "Found file in dotfiles")"
			# shellcheck disable=SC2155
			local hashfl=$(cat "$df_fl.hash")
		fi

		if [ ! "$hashed" ] && [[ $1 == "encrypt" ]]; then
			verecho "$(levecho 2 "File not found in dmz. Skipping")"
			continue
		fi

		if [ ! "$hashfl" ] && [[ $1 == "decrypt" ]]; then
			verecho "$(levecho 2 "File not found in dotfiles. Skipping")"
			continue
		fi

		if [[ $hashed == "$hashfl" ]] && [[ $2 != "force" ]]; then
			verecho "$(levecho 2 "File hashes match. Skipping")"
			continue
		fi

		[ ! "$DG_PASS" ] && get_password

		local gpg_cmd

		[[ $1 == "encrypt" ]] && gpg_cmd="-c"
		[[ $1 == "decrypt" ]] && gpg_cmd="-d"

		if [ -a "$to_fl" ] || [ -h "$to_fl" ]; then
			rm "$to_fl"
			[ -f "$to_fl.hash" ] && rm "$to_fl.hash"
		fi

		mkdir -p "$(dirname "$to_fl")"
		gpg -q --batch --passphrase "$DG_PASS" $gpg_cmd -o "$to_fl" "$fr_fl"
		chmod "$(stat -c %a "$fr_fl")" "$to_fl"

		[[ $1 == "encrypt" ]] && echo -n "$hashed" > "$to_fl.hash"

		for cat in "${c[@]:1}"; do
			local fl="$TO_D/$cat/$f"
			if [ -a "$fl" ] || [ -h "$fl" ]; then
				rm "$fl"
				[ -f "$fl.hash" ] && rm "$fl.hash"
			fi
			mkdir -p "$(dirname "$fl")"
			ln -rs "$to_fl" "$fl"
		done
		unset cat

		unset hashed
		unset hashfl
	done
	unset index

	clean_repo
}

[[ ! $DG_START ]] && echo "Do not source this directly, it is used by dotgit"
