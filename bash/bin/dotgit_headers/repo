#! /bin/bash
# Part of dotgit

function errecho
{
	>&2 echo -e "$*"
}

function verecho
{
	[[ $DG_VERBOSE -eq 0 ]] && echo -e "$*"
}

function levecho
{
	local tmp=
	while [[ ${#tmp} -lt "$1" ]]; do
		tmp=$(echo -n "$tmp ")
	done
	tmp=$(echo -n "$tmp>")

	shift
	echo -n "$tmp $*"
}

function prompt
{
	read -rp "$* [Y/n]: " ans

	[[ $ans ==  "Y" ]] && return 0
	[[ $ans ==  "y" ]] && return 0
	[[ ! $ans  ]] && return 0

	return 1
}

function init
{
	if ! cd "$REPO"; then
		errecho "Unable to enter repo."
		exit 1
	fi

	touch "$FILELIST"
	touch "$CRYPTLIST"
	if [ ! -f .gitignore ] || ! grep -q "$DG_DMZ" .gitignore; then
		echo "$DG_DMZ" >> .gitignore
	fi

	if [ ! -d ".git" ]; then
		git init
		git checkout -b master
		git add --all
	fi

	git diff --staged --quiet || git commit -m "Initial dotgit commit" || \
		errecho "Failed to create initial commit, please re-init this" \
		"repository after fixing the errors"
}

function safety_checks
{
	if [[ $REPO == "$HOME" ]]; then
		errecho "Do not run dotgit in your home directory, run it in your" \
			"dotfiles repository"
		exit 1
	fi

	if [ ! -d ".git" ]; then
		errecho "This does not appear to be a git repository. Aborting..."
		exit 1
	fi

	if [ ! -f "$FILELIST" ]; then
		errecho "Cannot locate filelist. Please make sure this repository" \
			"was initialised by dotgit."
		exit 1
	fi

	if [ ! -f "$CRYPTLIST" ]; then
		errecho "Cannot locate cryptlist. Please make sure this repository" \
			"was initialised by dotgit."
		exit 1
	fi

	if ! mkdir -p "$REPO/$DG_DFDIR"; then
		"Unable to create dotfiles dir"
		exit 1
	fi

	if ! mkdir -p "$REPO/$DG_DMZ"; then
		"Unable to create dmz dir"
		exit 1
	fi
}

function init_flists
{
	verecho "\nInitiating filelists"
	# shellcheck disable=SC2164
	cd "$HOME"
	local n=0

	FN=()
	FC=()
	FE=()

	IFS=$'\n'
	for cur in "$REPO/$FILELIST" "$REPO/$CRYPTLIST"; do
		while read -r line; do
			[ ! "$line" ] && continue
			[[ $line =~ ^# ]] && continue
			# shellcheck disable=SC1001
			[[ $line =~ \= ]] && continue

			local -a l
			IFS=$':' l=($line)

			local -a arr
			IFS=$',' arr=(${l[1]:-"common"})
			IFS=$'\n' arr=($(sort -u<<<"${arr[*]}"))

			# If file entry is folder inside repo and home folder has no such
			# file, folder or the folder is empty - then use repo contents as
			# filelist
			if [ -d "$REPO/$DG_DFDIR/${arr[0]}/${l[0]}" ]; then
				if [ ! -f "${l[0]}" ]; then
					if [ ! -d "${l[0]}" ] || [[ ! $(ls -A "${l[0]}") ]]; then
						verecho "$(levecho 1 "Using repo dir for ${l[0]}")"
						PRE="$REPO/$DG_DFDIR/${arr[0]}/"
						mkdir -p "${l[0]}"
					fi
				fi
			fi

			if [ ! -d "${l[0]}" ]; then
				FN+=("${l[0]}")
				IFS=$',' FC+=("${arr[*]}")
				FE+=($n)
				verecho "$(levecho 1 "Added ${l[0]} - ${arr[*]} - $n")"
			else
				IFS=$','
				verecho "$(levecho 1 \
					"Using directory mode for ${l[0]} - ${arr[*]} - $n")"

				IFS=$'\n'
				while read -r fls; do
					[[ ! $fls ]] && continue
					[[ $PRE ]] && fls=${fls#$PRE}
					FN+=("$fls")
					IFS=$',' FC+=("${arr[*]}")
					FE+=($n)
					verecho "$(levecho 2 "Added $fls")"
				done <<< "$(find "$PRE${l[0]}" -not -type d)"
				unset fls
			fi

			unset PRE
		done < "$cur"
		n=1
	done

	IFS=$'\n'
	for i1 in $(seq 0 $((${#FN[@]} - 1))); do
		IFS=$'\n'
		for i2 in $(seq $((i1 + 1)) $((${#FN[@]} - 1))); do
			if [[ ${FN[$i2]} == "${FN[$i1]}" ]]; then
				local f1=0
				local f2=0
				IFS=$','

				for c1 in ${FC[$i1]}; do
					# shellcheck disable=SC2153
					for c2 in "${CTG[@]}"; do
						if [[ $c1 ==  "$c2" ]]; then
							f1=1
							break;
						fi
					done
					[[ $f1 -eq 1 ]] && break
				done

				for c1 in ${FC[$i2]}; do
					for c2 in "${CTG[@]}"; do
						if [[ $c1 ==  "$c2" ]]; then
							f2=1
							break;
						fi
					done
					[[ $f2 -eq 1 ]] && break
				done

				unset c1
				unset c2

				if [[ $f1 -eq 1 ]] && [[ $f2 -eq 1 ]]; then
					IFS=$'\n'
					errecho "Duplicate file entry found:" \
						"${FN[$i1]}:${FC[$i1]}" \
						"${FN[$i2]}:${FC[$i2]}"
					exit 1
				fi
			fi
		done
		unset i2
	done
	unset i1

	unset line
	unset cur
}

function init_cgroups
{
	IFS=$'\n'
	for cur in "$REPO/$FILELIST" "$REPO/$CRYPTLIST"; do
		IFS=$'\n'
		while read -r line; do
			[ ! "$line" ] && continue
			[[ $line =~ ^# ]] && continue
			# shellcheck disable=SC1001
			! [[ $line =~ \= ]] && continue

			IFS=$'='
			local l=($line)
			# shellcheck disable=SC2034
			CTGG[${l[0]}]="${l[1]}"
		done < "$cur"
	done

	unset line
	unset cur
}

[[ ! $DG_START ]] && echo "Do not source this directly, it is used by dotgit"
